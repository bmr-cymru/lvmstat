#!/usr/bin/python
# lvmstat.py
# Copyright (C) 2014 Red Hat, Inc. Bryn M. Reeves <bmr@redhat.com>
""" lvmstat - device-mapper and LVM2 statistics """

# for print(..., file=sys.stderr)
from __future__ import print_function

import os
import re
import sys
import time
import shlex
import signal
import locale
from optparse import OptionParser
from subprocess import Popen, CalledProcessError, PIPE

# globals

DMSETUP = "dmsetup"
PROC_UPTIME = "/proc/uptime"
PROC_STAT = "/proc/stat"
PROC_MEMINFO = "/proc/meminfo"
DM_MOD_PARAM_PATH = "/sys/module/dm_mod/parameters/"
DM_ALLOCED_BYTES = "stats_current_allocated_bytes"

ENV_TIME_FMT = "S_TIME_FORMAT"

K_ISO = "ISO"

S_SIZE = 512

# try to obtain the value of USER_HZ from the environment
try:
    HZ = os.sysconf(os.sysconf_names["SC_CLK_TCK"])
except KeyError:
    HZ = 100

# enable debugging messages
_debug = False

# The set of devices listed on the command line or the set of active
# logical volumes (as returned by lvs) if no device arguments were given.
_devices = set([])

# The current set of monitored regions, _regions is a dictionary of
# string:set pairs mapping devices to sets of region_ids.
_regions = dict()

# Two element list of dictionaries containing counter samples.
#
# Each dictionary is indexed by device and contains a dictionary
# indexed by region ID. Each region ID yields a dictionary of area IDs
# containing IoStats objects holding counter samples for the corresponding
# device, region ID, and area ID:
#
# _iostats[curr][dev][region_id][area_id] = IoStat(counters)
#
_iostats = [dict(), dict()]
# current index into _iostats; inverted at the end of each _interval.
_curr = 0

# CPU counters from PROC_STAT
_cpustats = [None, None]

# memory usage from /sys/module/dm_mod/parameters/stats_current_allocated_bytes
_memstats = [(0, 0), (0, 0)]

# system uptime (seconds) indexed by _curr
_uptime = [0.0, 0.0]

# interval between successive rounds of stats
_interval = 1

# count of stats reports to print
_count = 1

# boolean flags controlling report formatting

# report statistics for each extent in a device
_extents = False
# report statistics for each segment in a device
_segments = False
# report statistics for device areas of a given size
_areas = False
_nr_areas = False

# default is kB
_display_mb = False
_display_kb = False

# display the CPU report
_show_cpu = False

# display timestamps
_timestamp = False
# True if ENV_TIME_FORMAT=K_ISO
_display_iso = False

# default is traditional
_extended = False

# displaye sector ranges covered by stats areas
_show_area_ranges = False

_lvmstat_id = "lvmstat1"


def _log_error(msg):
    print("Error: " + msg, file=sys.stderr)


def _log_warn(msg):
    print("WARNING: " + msg, file=sys.stderr)


def _log_debug(msg):
    if _debug:
        print("DEBUG: " + msg, file=sys.stderr)


def _log_info(msg):
    print(msg)


class CpuStats(object):
    """ Class to represent CPU counters from /proc/stat """
    cpu_user = 0
    cpu_nice = 0
    cpu_sys = 0
    cpu_idle = 0
    cpu_iowait = 0
    cpu_steal = 0
    cpu_hardirq = 0
    cpu_softirq = 0
    cpu_guest = 0
    cpu_guest_nice = 0

    def __init__(self):
        def _write_cpustats_debug(stats):
            if not _debug:
                return
            fields = [
                "user=%d", "nice=%d", "sys=%d", "idle=%d", "iowait=%d",
                "steal=%d", "hardirq=%d", "softirq=%d", "guest=%d",
                "guest_nice=%d"
            ]
            f = lambda (s, d): s % d
            dbgstr = ", ".join(map(f, zip(fields, stats)))
            _log_debug("cpustat(%s)" % dbgstr)

        for line in open(PROC_STAT, 'r').readlines():
            if line.startswith("cpu "):
                fields = line.split()
                counters = map(int, fields[1:])
                _log_debug("counters: %s" % counters)
                self.cpu_user = counters[0]
                self.cpu_nice = counters[1]
                self.cpu_sys = counters[2]
                self.cpu_idle = counters[3]
                self.cpu_iowait = counters[4]
                self.cpu_steal = counters[5]
                self.cpu_hardirq = counters[6]
                self.cpu_softirq = counters[7]
                self.cpu_guest = counters[8]
                self.cpu_guest_nice = counters[9]
                _write_cpustats_debug(counters)
                break


class IoStats(object):
    """ Class to represrent IO counters from device-mapper. """
    area_id = None
    start = 0
    length = 0
    nr_ios = 0
    rd_sectors = 0
    wr_sectors = 0
    rd_ios = 0
    rd_merges = 0
    wr_ios = 0
    wr_merges = 0
    rd_ticks = 0
    wr_ticks = 0
    ios_pgr = 0
    tot_ticks = 0
    rq_ticks = 0
    rd_tot_ms = 0
    wr_tot_ms = 0

    def __init__(self, line):
        def _write_iostats_debug(stats):
            if not _debug:
                return
            fields = [
                "rd_ios=%d", "rd_merges=%d", "rd_sectors=%d", "rd_ticks=%d",
                "wr_ios=%d", "wr_merges=%d", "wr_sectors=%d", "wr_ticks=%d",
                "ios_pgr=%d", "tot_ticks=%d", "rq_ticks=%d", "nr_ios=%d",
                "rd_tot_ms=%d", "wr_tot_ms=%d"
            ]
            f = lambda (s, d): s % d
            dbgstr = ", ".join(map(f, zip(fields, stats)))
            _log_debug("iostat(%s)" % dbgstr)

        if not line:
            return
        fields = line.split()
        s_range = fields[0]
        self.area_id = s_range
        (start, length) = map(int, s_range.split("+"))

        stats = map(int, fields[1:])
        _log_debug("counters: %s" % stats)

        # 0. the number of reads completed
        # 1. the number of reads merged
        # 2. the number of sectors read
        # 3. the number of milliseconds spent reading
        self.rd_ios = stats[0]
        self.rd_merges = stats[1]
        self.rd_sectors = stats[2]
        self.rd_ticks = stats[3]

        # 4. the number of writes completed
        # 5. the number of writes merged
        # 6. the number of sectors written
        # 7. the number of milliseconds spent writing
        self.wr_ios = stats[4]
        self.wr_merges = stats[5]
        self.wr_sectors = stats[6]
        self.wr_ticks = stats[7]

        # 8. the number of I/Os currently in progress
        # 9. the number of milliseconds spent doing I/Os
        # 10. the weighted number of milliseconds spent doing I/Os
        self.ios_pgr = stats[8]
        self.tot_ticks = stats[9]
        self.rq_ticks = stats[10]
        self.nr_ios = self.rd_ios + self.wr_ios

        # Additional counters:
        # 11. the total time spent reading in milliseconds
        # 12. the total time spent writing in milliseconds
        if len(stats) > 11:
            self.rd_tot_ms = int(stats[11])
            self.wr_tot_ms = int(stats[12])

        _write_iostats_debug(stats)


def _exit(status):
    if len(_regions):
        _remove_regions(_regions)
    lvm.exit()
    sys.exit(status)


# Adapted from the python2.7 subprocess.py since py2.6 lacks check_output().
# Allows the script to run unmodified on RHEL6.
def check_output(*popenargs, **kwargs):
    r"""Run command with arguments and return its output as a byte string.

    If the exit code was non-zero it raises a CalledProcessError.  The
    CalledProcessError object will have the return code in the returncode
    attribute.
    """
    if 'stdout' in kwargs:
        raise ValueError('stdout argument not allowed, it will be overridden.')
    process = Popen(stdout=PIPE, *popenargs, **kwargs)
    output, unused_err = process.communicate()
    retcode = process.poll()
    if retcode:
        cmd = kwargs.get("args")
        if cmd is None:
            cmd = popenargs[0]
        raise CalledProcessError(retcode, cmd)
    return output


def _shell_out(cmd):
    _log_debug("calling: %s" % cmd)
    try:
        return check_output(shlex.split(cmd))
    except CalledProcessError as e:
        _log_debug("call to %s failed: %d" % (cmd.split()[0], e.returncode))
        return False
    pass


def _dm_send_message(dev, sector, msg):
    msg_args = (dev, sector, msg)
    return _shell_out(DMSETUP + " message %s %d %s" % msg_args)


def _dm_stats_create(dev, s_range, s_step, s_prog_id, s_aux):
    """Create a new region and return the region_id."""
    msg_args = "%s %s %s %s" % (s_range, s_step, s_prog_id, s_aux)
    return _dm_send_message(dev, 0, "@stats_create " + msg_args)


def _dm_stats_delete(dev, s_region_id):
    return _dm_send_message(dev, 0, "@stats_delete %s" % s_region_id)


def _dm_stats_clear(dev, s_region_id):
    return _dm_send_message(dev, 0, "@stats_clear %s" % s_region_id)


def _dm_stats_list(dev, s_prog_id=None):
    """ returns a multi-line string buffer of available regions
    registered with @stats_create."""
    msg_str = "@stats_list"
    if s_prog_id:
        msg_str = msg_str + ' ' + s_prog_id
    return _dm_send_message(dev, 0, msg_str)


def _dm_stats_print(dev, s_region_id, start=None, limit=None, clear=False):
    """ returns a multi-line string buffer of counter values.
    lines are of the form:

    <start_sector>+<length> counters

    Counter fields:
      1. the number of reads completed
      2. the number of reads merged
      3. the number of sectors read
      4. the number of milliseconds spent reading
      5. the number of writes completed
      6. the number of writes merged
      7. the number of sectors written
      8. the number of milliseconds spent writing
      9. the number of I/Os currently in progress
      10. the number of milliseconds spent doing I/Os
      11. the weighted number of milliseconds spent doing I/Os

      Additional counters:
      12. the total time spent reading in milliseconds
      13. the total time spent writing in milliseconds

    See Documentation/device-mapper/statistics.txt and
    Documentation/iostats.txt for a complete description.
    """
    print_msg = "@stats_print"
    if clear:
        print_msg = print_msg + "_clear"
    if start and limit:
        msg_args = "%s %s %s" % (s_region_id, start, limit)
    else:
        msg_args = "%s" % s_region_id
    return _dm_send_message(dev, 0, print_msg + " " + msg_args)


def _dm_stats_print_clear(dev, s_region_id, start=None, limit=None):
    """ returns a multi-line string buffer of counter values and clear
    all counters (except in-flight IO). Lines are returned in the same
    format as _dm_stats_print()."""
    return _dm_stats_print(dev, s_region_id, start, limit, clear=True)


# LVM field constants

# LV fields
LV_NAME = "lv_name"
LV_ATTR = "lv_attr"
LV_SIZE = "lv_size"

# VG fields
VG_NAME = "vg_name"
PV_COUNT = "pv_count"
LV_COUNT = "lv_count"
VG_SEQNO = "vg_seqno"
VG_ATTR = "vg_attr"
VG_SIZE = "vg_size"
VG_FREE = "vg_free"
VG_EXTENT_SIZE = "vg_extent_size"

# Segment fields
SEGMENTS = "segments"

SEGTYPE = "segtype"
SEG_START = "seg_start"
SEG_SIZE = "seg_size"

LVM_SIZE_ATTRS = [LV_SIZE, VG_SIZE, VG_FREE, VG_EXTENT_SIZE]
LVM_COUNT_ATTRS = [PV_COUNT, LV_COUNT]


class Lvm(object):
    # lvs cache - 1s ttl, args must match exactly.
    # (lvs, timestamp, vgname, lvname, segments)
    _lvs_cache = None
    _lvs_calls = 0
    _lvs_cache_hits = 0
    _lvs_cache_misses = 0

    # wrap _shell_out to allow e.g. maintaining a running lvm shell that
    # successive commands are piped to.
    def _run_command(self, cmd):
        return _shell_out(cmd)

    def _lvs_cache_valid(self, args):
        self._lvs_calls += 1
        if self._lvs_cache:
            now = time.time()
            f = lambda (x, y): x == y
            cache_args = self._lvs_cache[2:]
            args_match = all(map(f, zip(cache_args, args)))
            if args_match and now - self._lvs_cache[1] < 1.0:
                self._lvs_cache_hits += 1
                return True
            else:
                self._lvs_cache_misses += 1
                return False

    def lvs(self, vgname=None, lvname=None, segments=False):
        if self._lvs_cache_valid((vgname, lvname, segments)):
            return self._lvs_cache[0]

        LVS_FIELDS = [LV_NAME, VG_NAME, LV_ATTR, LV_SIZE, VG_EXTENT_SIZE]
        cmd = "lvs --units s --noheadings"
        fields = "-o " + ",".join(LVS_FIELDS)
        if segments:
            SEG_FIELDS = [SEGTYPE, SEG_SIZE, SEG_START]
            cmd += " --segments"
            fields += "," + ",".join(SEG_FIELDS)
        cmd += " " + fields
        if vgname and lvname:
            cmd += " %s/%s" % (vgname, lvname)
        elif vgname:
            cmd += " %s" % vgname
        output = self._run_command(cmd)
        if not output:
            return False
        _lvs = dict()
        for line in output.splitlines():
            fields = line.split()
            lv_name = fields[0]
            vg_name = fields[1]
            # used as the key into the table of lvs since the volume
            # group name qualifies the logical volume name.
            vg_lv_name = "%s/%s" % (vg_name, lv_name)
            if (vg_lv_name) not in _lvs.keys():
                _lvs[vg_lv_name] = dict()
                _lvs[vg_lv_name][LV_NAME] = fields[0]
                _lvs[vg_lv_name][VG_NAME] = fields[1]
                _lvs[vg_lv_name][LV_ATTR] = fields[2]
                _lvs[vg_lv_name][LV_SIZE] = int(fields[3].strip("S"))
                _lvs[vg_lv_name][VG_EXTENT_SIZE] = int(fields[4].strip("S"))
            if segments:
                if SEGMENTS not in _lvs[vg_lv_name].keys():
                    _lvs[vg_lv_name][SEGMENTS] = []
                seg = dict()
                seg[SEGTYPE] = fields[5]
                seg[SEG_SIZE] = int(fields[6].strip("S"))
                seg[SEG_START] = int(fields[7].strip("S"))
                _lvs[vg_lv_name][SEGMENTS].append(seg)
        self._lvs_cache = (_lvs, time.time(), vgname, lvname, segments)
        return _lvs

    def vgs(self, vgname=None):
        VGS_FIELDS = [
            VG_NAME,
            PV_COUNT, LV_COUNT,
            VG_SEQNO, VG_ATTR,
            VG_SIZE, VG_FREE,
            VG_EXTENT_SIZE
        ]
        cmd = "vgs --units s --noheadings"
        fields = "-o " + ",".join(VGS_FIELDS)
        if vgname:
            cmd += " %s" % vgname
        output = self._run_command(cmd)
        if not output:
            return False
        _vgs = dict()
        for line in output.splitlines():
            fields = line.split()
            _vgs[fields[0]] = dict()
            for (name, val) in zip(VGS_FIELDS, fields):
                if name in LVM_SIZE_ATTRS:
                    _vgs[fields[0]][name] = int(val.strip('S'))
                elif name in LVM_COUNT_ATTRS:
                    _vgs[fields[0]][name] = int(val)
                else:
                    _vgs[fields[0]][name] = val
        return _vgs

    def lv_is_active(self, lv):
        return re.match("....a.....", lv[LV_ATTR])

    def is_vg_name(self, vgname):
        vgs = self.vgs(vgname=vgname)
        if not vgs:
            return False
        return vgname in vgs

    def is_lv_name(self, lvname, vgname=None):
        lvs = self.lvs(vgname=vgname)
        if not lvs:
            return False
        return lvname in lvs

    def canonicalize_lv_name(self, name, verify=False, active=False):
        # remove leading prefixes
        if name.startswith("/dev/"):
            name = name[5:]
        if name.startswith("mapper/"):
            name = name[7:]

        # canonical vg/lv format
        if '/' in name:
            name = name.split('/')
        # dm name
        elif '-' in name:
            name = name.split('-')

        vg_name = name[0]
        lv_name = name[1]
        # used as a unique key
        vg_lv_name = "%s/%s" % (vg_name, lv_name)
        if verify or active:
            res = self.lvs(vgname=vg_name, lvname=lv_name)
            if not res:
                return False
            if active and not self.lv_is_active(res[vg_lv_name]):
                return False

        return vg_lv_name

    def lv_dm_name(self, vg_lv_name):
        return vg_lv_name.replace('-', '--').replace('/', '-')

    def exit(self):
        msg = "lvs cache hits: %d misses: %d calls: %d"
        vals = (self._lvs_cache_hits, self._lvs_cache_misses, self._lvs_calls)
        _log_debug(msg % vals)


lvm = Lvm()


def _set_alarm(secs):
    signal.signal(signal.SIGALRM, _handle_alarm)
    signal.alarm(secs)


def _handle_alarm(signum, stack):
    """ Handler for SIGALARM. """
    if _count:
        _set_alarm(_interval)


def _scale(m, n, p):
    """ Scale samples over an interval to a rate """
    return ((n - m) / p) * HZ


def _scale_percent(m, n, p):
    """ Scale samples over an interval to a percentage """
    return ((n - m) / p) * 100


def _show_stats_ext(dev, itv, fctr, stc, stp):
    """ Show statatistics in the extended iostat format. """
    _log_debug("_show_stats_ext(itv=%d, fctr=%d, ...)" % (itv, fctr))

    # throughput and utilisation
    tput = ((stc.nr_ios - stp.nr_ios) * HZ) / itv
    util = _scale(stp.tot_ticks, stc.tot_ticks, itv)

    nr_ios = stc.nr_ios - stp.nr_ios
    nr_rd_ios = stc.rd_ios - stp.rd_ios
    nr_wr_ios = stc.wr_ios - stp.wr_ios

    # service time
    svctm = 0.0
    if tput:
        svctm = util / tput

    # average wait time
    await = 0.0
    if nr_ios:
        io_ticks = stc.rd_ticks - stp.rd_ticks + stc.wr_ticks - stp.wr_ticks
        await = io_ticks / nr_ios

    r_await = 0.0
    if nr_rd_ios:
        r_await = (stc.rd_ticks - stp.rd_ticks) / nr_rd_ios

    w_await = 0.0
    if nr_wr_ios:
        w_await = (stc.wr_ticks - stp.wr_ticks) / nr_wr_ios

    # average request size
    arqsz = 0.0
    if nr_ios:
        sectors = stc.rd_sectors - stp.rd_sectors
        sectors += stc.wr_sectors - stp.wr_sectors
        arqsz = sectors / nr_ios

    #      rrqm  wrqm   r/s   w/s   rsec wsec
    fmt = "%8.2f %8.2f %7.2f %7.2f %8.2f %8.2f "
    #      rqsz  qusz await r_await w_await svctm %util
    fmt += "%8.2f %8.2f %7.2f %7.2f %7.2f %6.2f %6.2f"
    fmt %= (
        _scale(stp.rd_merges, stc.rd_merges, itv),
        _scale(stp.wr_merges, stc.wr_merges, itv),
        _scale(stp.rd_ios, stc.rd_ios, itv),
        _scale(stp.wr_ios, stc.wr_ios, itv),
        _scale(stp.rd_sectors, stc.rd_sectors, itv) / fctr,
        _scale(stp.wr_sectors, stc.wr_sectors, itv) / fctr,
        arqsz,
        _scale(stp.rq_ticks, stc.rq_ticks, itv) / 1000.0,
        await,
        r_await,
        w_await,
        svctm,
        util / 10.0
    )
    _log_info(dev + fmt)


def _show_stats_basic(dev, itv, fctr, stc, stp):
    """ Show statistics in the basic iostat formati. """
    rd_sec = stc.rd_sectors - stp.rd_sectors
    wr_sec = stc.wr_sectors - stp.wr_sectors
    #       tps   rsec/s wsec/s rsec   wsec
    fmt = " %8.2f %12.2f %12.2f %10u %10u"
    fmt %= (
        _scale(stp.rd_ios + stp.wr_ios, stc.rd_ios + stc.wr_ios, itv),
        _scale(stp.rd_sectors, stc.rd_sectors, itv) / fctr,
        _scale(stp.wr_sectors, stc.wr_sectors, itv) / fctr,
        rd_sec / fctr,
        wr_sec / fctr
    )
    _log_info(dev + fmt)


def _show_cpu_stats(itv, cpc, cpp):
    """ Show cpu statistics in the iostat format. """
    if cpc.cpu_idle < cpp.cpu_idle:
        idle = _scale_percent(cpp.cpu_idle, cpc.cpu_idle, itv)
    else:
        idle = 0.0
    hdr = "avg-cpu:  %user   %nice %system %iowait  %steal   %idle"
    fmt = "         %6.2f  %6.2f  %6.2f  %6.2f  %6.2f  %6.2f\n"
    fmt %= (
        _scale_percent(cpp.cpu_user, cpc.cpu_user, itv),
        _scale_percent(cpp.cpu_nice, cpc.cpu_nice, itv),
        _scale_percent(cpp.cpu_sys + cpp.cpu_softirq + cpp.cpu_hardirq,
                       cpc.cpu_sys + cpc.cpu_softirq + cpc.cpu_hardirq, itv),
        _scale_percent(cpp.cpu_iowait, cpc.cpu_iowait, itv),
        _scale_percent(cpp.cpu_steal, cpc.cpu_steal, itv),
        idle
    )
    _log_info(hdr)
    _log_info(fmt)


def _get_mem_stats(curr):
    """ Return simple dm-statistics memory usage information as a string, """
    if _display_mb:
        _u = "MB"
        fctr = (2 ** 20) * 1.0
    elif _display_kb:
        _u = "KB"
        fctr = (2 ** 10) * 1.0
    else:
        _u = "B"
        fctr = 1

    mem_total = _memstats[curr][0] / fctr
    mem_alloc = _memstats[curr][1] / fctr
    mem_change = (_memstats[curr][1] - _memstats[not curr][1]) / fctr
    mem_percent = (mem_alloc * 100.0) / mem_total
    mem_str = "stats bytes allocated: %2.2f%s/%2.2f%s (%2.2f%% +/- %2.2f%s)"
    mem_str %= (mem_alloc, _u, mem_total, _u, mem_percent, mem_change, _u)
    return mem_str

def _get_area_range(area, fctr):
    _suffixes = {
        1: 'S',
        2: 'K',
        2048: 'M'
    }
    (start, length) = map(float, area.split("+"))
    end = start + length - 1
    suffix = _suffixes[fctr]
    area_vals = (start / fctr, suffix, end / fctr, suffix)
    if fctr == 1:
        return "%d%s-%-d%s" % area_vals
    return "%.2f%s-%-.2f%s" % area_vals

def _show_area_range(area, fctr):
    _log_info(_get_area_range(area, fctr))

def _show_stats(regions, rectime):
    """ Print the time, CPU, memory, and device reports (if enabled). """
    def _get_interval(prev_uptime, curr_uptime):
        itv = curr_uptime - prev_uptime
        if not itv:
            itv = 1  # Paranoia checking
        return itv

    itv = _get_interval(_uptime[not _curr], _uptime[_curr])

    max_itv = HZ + 1
    if itv > max_itv:
        _log_warn("interval exceeded %dms: %d" % (max_itv, itv))

    mem_str = _get_mem_stats(_curr)

    if _timestamp:
        if _display_iso:
            timestamp = time.strftime("%FT%T%z", rectime)
        else:
            timestamp = time.strftime("%x %X", rectime)
        _log_info(timestamp + "       " + mem_str)
    else:
        _log_info(mem_str)

    if _show_cpu:
        _show_cpu_stats(itv, _cpustats[_curr], _cpustats[not _curr])

    fctr = _show_header()
    for dev in regions.keys():
        dev_str = "%-13s" % dev
        dev_regions = list(regions[dev])
        dev_regions.sort()
        for region in dev_regions:
            area_list = _iostats[_curr][dev][region].keys()
            area_list.sort(key=lambda a: int(a.split("+")[0]))
            for area in area_list:
                _log_debug("area: %s" % area)
                stc = _iostats[_curr][dev][region][area]
                stp = _iostats[not _curr][dev][region][area]
                if _extended:
                    _show_stats_ext(dev_str, itv, fctr, stc, stp)
                else:
                    _show_stats_basic(dev_str, itv, fctr, stc, stp)
                if _show_area_ranges:
                    _show_area_range(area, fctr)

    # This line intentionally left blank.
    _log_info("")


def _read_dev_stats(dev, regions, curr):
    """ Read performance counters for device dev into the iostats slot
    pointed to by curr."""
    _iostats[curr][dev] = dict()
    for region in regions[dev]:

        _iostats[curr][dev][region] = dict()

        raw_stats = _dm_stats_print(dev, region)
        if not raw_stats:
            _log_error("failed to retrieve counters for '%s'" % dev)
            _exit(1)

        for line in raw_stats.splitlines():
            area_id = line.split()[0]
            iostats = IoStats(line)
            _iostats[curr][dev][region][area_id] = iostats


def _read_cpu_stats(curr):
    """ Read CPU performance counters into the slot pointed to by curr. """
    try:
        _cpustats[curr] = CpuStats()
    except:
        _log_error("failed to read cpu counters from '%s'" % PROC_STAT)
        _exit(1)


def _read_mem_stats(curr):
    """ Read memory performance counters into the slot pointed to by curr. """
    memtotal = 0
    stats_bytes_allocated = 0
    try:
        for line in open(PROC_MEMINFO, 'r').readlines():
            if line.startswith("MemTotal"):
                value = line.split()[1]
                break
        memtotal = int(value) * 1024
    except:
        _log_error("failed to read memtotal from '%s'" % PROC_MEMINFO)
        _exit(1)
    try:
        dm_stat_bytes_path = os.path.join(DM_MOD_PARAM_PATH, DM_ALLOCED_BYTES)
        line = open(dm_stat_bytes_path, 'r').read()
        (value) = line.split()[0]
        stats_bytes_allocated = int(value)
    except Exception as e:
        msg = "failed to read current allocated bytes from '%s' (%s)"
        _log_error(msg % (DM_ALLOCED_BYTES, e))
        _exit(1)
    _memstats[curr] = (memtotal, stats_bytes_allocated)


def _init_mem_stats(curr):
    """ Initialise the not-current memory counters slot. """
    _read_mem_stats(not curr)


def _init_cpu_stats(curr):
    """ Initialise the not-current cpu counters slot. """
    _read_cpu_stats(not curr)


def _read_uptime(curr):
    """ Read uptime into the slot pointed to by curr. """
    try:
        with open(PROC_UPTIME, 'r') as f:
            s_uptime = f.read().split()[0]
            # samples are in ticks
            uptime = float(s_uptime) * HZ
    except:
        _log_error("failed to read uptime from '%s'" % PROC_UPTIME)
        _exit(1)
    _uptime[curr] = uptime


def _init_uptime(curr):
    """ Initialise the not-current uptime counter slot. """
    _read_uptime(not curr)


def _read_stats(regions, curr):
    """ Read CPU, memory, and device performance counters. """
    _log_debug("_read_stats")
    _read_cpu_stats(curr)
    _read_mem_stats(curr)
    for dev in regions.keys():
        _read_dev_stats(dev, regions, curr)


def _show_header():
    """ Display the device report header. """
    fctr = 1
    if _extended:
        hdr = "Device:         rrqm/s   wrqm/s     r/s     w/s"
        if _display_mb:
            hdr += "    rMB/s    wMB/s"
            fctr = 2048
        elif _display_kb:
            hdr += "    rkB/s    wkB/s"
            fctr = 2
        else:
            hdr += "   rsec/s   wsec/s"
        hdr += " avgrq-sz avgqu-sz   await r_await w_await  svctm  %util"
    else:
        hdr = "Device:            tps"
        if _display_mb:
            hdr += "    MB_read/s    MB_wrtn/s    MB_read    MB_wrtn"
            fctr = 2048
        elif _display_kb:
            hdr += "    kB_read/s    kB_wrtn/s    kB_read    kB_wrtn"
            fctr = 2
        else:
            hdr += "   Blk_read/s   Blk_wrtn/s   Blk_read   Blk_wrtn"
    _log_info(hdr)
    return fctr


def _show_sys_header(rectime):
    """ Display the system banner. """
    _uname = os.uname()
    nr_cpus = os.sysconf("SC_NPROCESSORS_ONLN")
    if not rectime:
        curr_date = "?/?/?"
    elif _display_iso:
        curr_date = time.strftime("%Y-%m-%d", rectime)
    else:
        curr_date = time.strftime("%x", rectime)
    _hdrinfo = (_uname[0], _uname[2], _uname[1], curr_date, _uname[4], nr_cpus)
    _log_info("%s %s (%s) \t%s \t_%s_\t(%d CPU)\n" % _hdrinfo)


def _main_loop():
    """ Display the system header and start the main loop. """
    global _count, _curr
    rectime = time.localtime()
    _show_sys_header(rectime)
    while _count:
        _read_stats(_regions, _curr)
        rectime = time.localtime()
        _read_uptime(_curr)
        _show_stats(_regions, rectime)
        _count -= 1
        try:
            signal.pause()
            _curr ^= 1
        except KeyboardInterrupt:
            break
    _remove_regions(_regions)
    lvm.exit()


def _create_region(dev, r_start, r_len, a_size=None, a_step=None, aux=""):
    """ Register a statistics region with the device-mapper.

    Parameters
    ----------

    dev: string
        The device-mapper name of the device to register a region on.
    r_start: int
        The starting sector of the new region or zero for whole-device.
    r_len: int
        The length of the region in sectors or zero for whole-device

    Keyword parameters
    ------------------

    a_size : int or NoneType
        The size of areas into which the region should be subdivided
    a_step : int or NoneType
        The number of areas into which the region should be subdivided.
    aux : the value to pass to the device-mapper as aux_id

    """
    global _show_area_ranges
    s_range = "%d+%d" % (r_start, r_len) if any((r_start, r_len)) else "-"
    s_step = "%d" % a_size if a_size else "/%d" % a_step if a_step else "/1"
    region = _dm_stats_create(dev, s_range, s_step, _lvmstat_id, aux)
    _show_area_ranges = any((r_start, r_len, a_size, a_step))
    if not region:
        msg = "failed to create statistics region for '%s'"
        _log_error(msg % dev)
        _exit(1)
    return region.strip("\n")


# register the list of regions with the device-mapper
def _create_regions(devices):
    """ Create regions according to devices and command-line options.
    The global _regions dictionary is indexed by device name and is
    populated with region dictionaries indexed by region ID. Each
    region dictionary is indexed by area_ids in the form 'start+length'
    and contains an IoStat object containing counters for that area_id. """

    def _init_counters(dev, regions):
        """ initialise the region list for a device and read initial samples
        into the inactive (not current) slot. """
        _regions[dev] = regions
        _read_dev_stats(dev, _regions, not _curr)

    area_size = None
    step = None
    extents_per_area = None

    lvs = lvm.lvs(segments=True)
    if not lvs:
        _log_error("could not retrieve logical volume list")
        _exit(1)

    extents_per_area = _extents

    if not _segments:
        for lv in lvs.keys():
            # use whole device
            lvs[lv][SEGMENTS] = [{SEG_START: 0, SEG_SIZE: 0}]

    if _areas:
        # @stats_create - $area_size $ourid $ouraux
        area_size = _areas

    if _nr_areas:
        # @stats_create - /$nr_areas $ourid $ouraux
        step = _nr_areas

    if not devices:
        devices = lvs.keys()

    for dev in devices:
        lv = lvm.canonicalize_lv_name(dev)
        if lv not in lvs.keys():
            _log_error("could not get LV information for '%s'" % dev)
            _exit(1)

        if _extents:
            # @stats_create - $ext_size*$ext_per_area $ourid $ouraux
            vg_extent_size = lvs[lv][VG_EXTENT_SIZE]
            area_size = vg_extent_size * extents_per_area

        # @stats_create foreach segment
        # e.g. for a 3-segment device:
        # |    0..1023    |   1024..2047   | 2048..2099 |
        # @stats_create 0+1024 $ourid $ouraux
        # @stats_create 1024+1024 $ourid $ouraux
        # @stats_create 2048+52 $ourid $ouraux
        dev_name = lvm.lv_dm_name(lv)
        dev_regions = set()
        for segment in lvs[lv][SEGMENTS]:
            s_start = segment[SEG_START]
            s_size = segment[SEG_SIZE]
            _log_debug("creating region for '%s',"
                       "start=%s, size=%s, step=%s, a_size=%s"
                       % (dev_name, s_start, s_size, step, area_size))
            region = _create_region(dev_name, s_start, s_size,
                                    a_step=step, a_size=area_size)

            dev_regions.add(region)
        # initialise counters once all regions are set up
        _init_counters(dev_name, dev_regions)


def _remove_regions(regions):
    """ Remove a set of regions registered with the device-mapper. """
    for dev in regions.keys():
        for region in regions[dev]:
            _dm_stats_delete(dev, region)


def _validate_lv_name(lv_name):
    """ Names may be in VG/LV, VG-LV, /dev/VG/LV,
    /dev/mapper/VG-LV format. """
    lv_name = lvm.canonicalize_lv_name(lv_name)
    return lvm.is_lv_name(lv_name)


def _validate_vg_name(vg_name):
    return lvm.is_vg_name(vg_name)


def _parse_size_arg(arg, name, sectors=False):
    """ Parse a size argument with optional units suffix. All size values
    must be a multiple of the sector size (512 bytes).

    Suffixes:
      b - bytes        1
      s - sectors    512
      k - kibibytes 1024
      m - mebibytes 1024^2
      g - gibibytes 1024^3
      t - tebibytes 1024^4
      p - pebibytes 1024^5
      e - ebibytes  1024^6

    """
    suffixes = "kmgtpebs"
    msg = None
    val = -1
    s = arg[-1:]
    if s.isdigit():
        arg = arg + 'b'
        s = 'b'
    s = s.lower()
    if s in suffixes and arg[:-1].isdigit():
        val = int(arg[:-1])
        if s == 's':
            val *= S_SIZE
        elif s == 'b':
            if sectors and val % S_SIZE:
                msg = "could not parse '%s': must be a multiple of 512." % name
        else:
            while True:
                val *= 1024
                if not len(suffixes) or s == suffixes[0]:
                    break
                suffixes = suffixes[1:]
    else:
        if s not in suffixes:
            msg = "could not parse '%s'. Unknown unit suffix: '%s'" % (name, s)
        else:
            msg = "could not parse '%s'. Invalid number: %s" % (name, arg[:-1])

    if msg:
        _log_error(msg)
        return -1
    return val


def _parse_sectors_arg(arg, name):
    return _parse_size_arg(arg, name, sectors=True) / S_SIZE


def _lvstat_parse_args(argv):
    """Parse command line options and arguments and assign values to global
    variables. """
    global _devices, _interval, _count
    global _display_kb, _display_mb, _display_iso, _timestamp
    global _extended, _segments, _extents, _areas, _nr_areas, _show_cpu
    global _debug
    _s = "store"
    _st = "store_true"
    units_help = "Display statistics in %s per second."
    region_help = "Display statistics by %s."
    ext_help = "Display extended statistics."

    # options table contains 6-tuples of optparse-style options in the format:
    #  ("-short", "--long", "dest", "help", "type", "action")
    opt_tab = [
        ("-c", "--cpu", "cpu", "Display the CPU utilization report.",
               None, _st),
        ("-D", None, "debug", "Display debugging information", None, _st),
        ("-x", "--extended", "extended", ext_help, None, _st),
        ("-s", "--segments", "segments", region_help % "segments", None, _st),
        ("-e", "--extents", "extents", region_help % "extents", "string", _s),
        ("-a", "--areas", "size", region_help % "areas of size SIZE",
               "string", _s),
        ("-n", "--nr-areas", "nr_areas", region_help % "NR_AREAS areas",
               "int", _s),
        ("-k", "--kilobytes", "kbytes", units_help % "kilobytes", None, _st),
        ("-m", "--megabytes", "mbytes", units_help % "megabytes", None, _st),
        ("-t", "--times", "times", "Print the time for each report", None, _st)
    ]
    parser = OptionParser()
    f = lambda (s, l, d, h, t, a):\
        parser.add_option(s, l, dest=d, help=h, type=t, action=a)
    map(f, opt_tab)
    (options, args) = parser.parse_args(argv[1:])

    # set immediately to allow debugging in arg parsing
    _debug = options.debug

    _extended = options.extended
    _segments = options.segments

    areas_msg = "can only use one of --areas, --nr-areas and --extents."
    if options.size:
        if options.nr_areas or options.extents:
            _log_error(areas_msg)
            _exit(1)
        # dm area sizes are in sectors
        _areas = _parse_sectors_arg(options.size, "area size")
        if _areas < 0:
            _exit(1)

    if options.extents:
        if options.nr_areas:
            _log_error(areas_msg)
            _exit(1)
        _extents = _parse_size_arg(options.extents, "extents")
        if _extents < 0:
            _exit(1)

    _nr_areas = options.nr_areas

    _display_kb = options.kbytes
    _display_mb = options.mbytes

    _timestamp = options.times
    _display_iso = ENV_TIME_FMT in os.environ and\
        os.environ[ENV_TIME_FMT] == K_ISO

    _show_cpu = options.cpu

    if not (_display_kb or _display_mb):
        if "POSIXLY_CORRECT" not in os.environ:
            _display_kb = True

    def _validate_int_arg(arg, name):
        """ Attempt to convert a string argument to integer. """
        try:
            _v = int(arg)
        except ValueError:
            msg = "%s must be a base 10 integer"
            _log_error(msg % name)
            _exit(1)
        return _v

    for i in range(len(args)):
        if args[i].isdigit():
            _interval = _validate_int_arg(args.pop(i), "interval")
            break

    for i in range(len(args)):
        if args[i].isdigit():
            _count = _validate_int_arg(args.pop(i), "count")
            break

    for dev in args:
        msg = "'%s' is not a valid logical volume or volume group name"
        if dev.isdigit():
            _log_error(msg % dev)
            _exit(1)
        if not _validate_lv_name(dev):
            if not _validate_vg_name(dev):
                _log_error(msg % dev)
                _exit(1)
            else:
                args.pop(args.index(dev))
                lvs = lvm.lvs(vgname=dev)
                args.extend(lvs.keys())

    _devices = set(args)


# pvstat_desc = "display iostat reports by physical volume"
# vgstat_desc = "display iostat reports by volume group"
lvstat_desc = "display iostat reports by logcal volume"
commands = ["lvstat"]


def lvstat_main(argv):
    """ Main entry point for lvstat. Parse arguments, initialise stats
    regions, CPU, memory, and uptime counters and start the alarm clock
    running. """
    _lvstat_parse_args(argv)
    _create_regions(_devices)
    _init_cpu_stats(_curr)
    _init_mem_stats(_curr)
    _init_uptime(_curr)
    _set_alarm(_interval)
    _main_loop()


def _lvmstat_usage():
    _log_info("Usage: lvmstat [command] [options]")
    _log_info("")
    _log_info("  Available lvmstat commands:")
    _log_info("  Use 'lvmstat <command> -h/--help' for more information")
    _log_info("")
    for cmd in commands:
        _log_info("  %-15s %s" % (cmd, globals()["%s_desc" % cmd]))
    _log_info("")


def main(argv):
    """ lvmstat - dispatch a command or show usage. """
    # use the default locale from the environment
    locale.setlocale(locale.LC_ALL, "")
    def cmd_err(cmd):
        _log_error("unknown command '%s'" % cmd)
        _lvmstat_usage()
        _exit(1)
    if argv[0].endswith('lvmstat'):
        argv = argv[1:]
    if not len(argv):
        cmd_err("")
    cmd = os.path.basename(argv[0])
    if cmd not in commands:
        cmd_err(cmd)
    try:
        # call cmd's main() function
        globals()["%s_main" % cmd](argv)
    except KeyboardInterrupt as e:
        return 0
    except Exception as e:
        if _debug:
            raise
        _log_error("%s" % e)
        _exit(1)


if __name__ == '__main__':
    """ Entry point if called as a script. """
    main(sys.argv)
